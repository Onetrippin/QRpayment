# Generated by Django 5.2.1 on 2025-05-28 19:18

import datetime

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import app.internal.transport_network.data.models.transport
import app.internal.users.data.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Admin',
                'verbose_name_plural': 'Admins',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('r_id', models.IntegerField(db_index=True)),
                ('number', models.CharField(db_index=True, max_length=64)),
                ('title', models.TextField(db_index=True)),
                (
                    'transport_type',
                    models.CharField(
                        choices=[('bus', 'Автобус'), ('trol', 'Троллейбус'), ('tram', 'Трамвай')], db_index=True
                    ),
                ),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.city')),
            ],
            options={
                'verbose_name': 'Route',
                'verbose_name_plural': 'Routes',
            },
        ),
        migrations.CreateModel(
            name='FavouriteRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'route',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='favourited_by', to='app.route'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Favourite route',
                'verbose_name_plural': 'Favourite routes',
            },
        ),
        migrations.CreateModel(
            name='Stop',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('s_id', models.IntegerField(db_index=True)),
                ('title', models.CharField(db_index=True, max_length=64)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=11)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.city')),
            ],
            options={
                'verbose_name': 'Stop',
                'verbose_name_plural': 'Stops',
            },
        ),
        migrations.CreateModel(
            name='RouteStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='', max_length=1)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.route')),
                ('stop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.stop')),
            ],
            options={
                'verbose_name': 'RouteStop',
                'verbose_name_plural': 'RouteStops',
            },
        ),
        migrations.AddField(
            model_name='route',
            name='stops',
            field=models.ManyToManyField(through='app.RouteStop', to='app.stop'),
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'uuid',
                    models.CharField(
                        default=app.internal.transport_network.data.models.transport.generate_hex_uuid,
                        editable=False,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ('garage_number', models.CharField(db_index=True, max_length=128)),
                (
                    'type',
                    models.CharField(
                        choices=[('bus', 'Автобус'), ('trol', 'Троллейбус'), ('tram', 'Трамвай')], db_index=True
                    ),
                ),
                ('state_number', models.CharField(db_index=True, max_length=128)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.city')),
                (
                    'route',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name='transports', to='app.route'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Transport',
                'verbose_name_plural': 'Transports',
            },
        ),
        migrations.CreateModel(
            name='QRCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('pay_tag_id', models.BigIntegerField(db_index=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_actual', models.BooleanField(default=True)),
                (
                    'transport',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='qr_codes', to='app.transport'
                    ),
                ),
            ],
            options={
                'verbose_name': 'QR code',
                'verbose_name_plural': 'QR codes',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'uuid',
                    models.CharField(
                        default=app.internal.users.data.models.user.generate_hex_uuid, max_length=32, unique=True
                    ),
                ),
                ('chat_id', models.BigIntegerField(unique=True)),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, null=True)),
                ('first_name', models.CharField(max_length=64)),
                ('last_name', models.CharField(blank=True, max_length=64, null=True)),
                ('last_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.city')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='PastRide',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('transport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.transport')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user')),
            ],
            options={
                'verbose_name': 'Past ride',
                'verbose_name_plural': 'Past rides',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.PositiveSmallIntegerField()),
                (
                    'days',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ('mon', 'ПН'),
                                ('tue', 'ВТ'),
                                ('wed', 'СР'),
                                ('thu', 'ЧТ'),
                                ('fri', 'ПТ'),
                                ('sat', 'СБ'),
                                ('sun', 'ВС'),
                            ],
                            max_length=15,
                        ),
                        size=None,
                    ),
                ),
                ('time_from', models.TimeField()),
                ('time_to', models.TimeField()),
                (
                    'interval',
                    models.DurationField(
                        choices=[
                            (datetime.timedelta(seconds=300), '5'),
                            (datetime.timedelta(seconds=600), '10'),
                            (datetime.timedelta(seconds=900), '15'),
                            (datetime.timedelta(seconds=1200), '20'),
                        ]
                    ),
                ),
                ('is_enabled', models.BooleanField(default=False)),
                (
                    'favourite_route',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.favouriteroute'),
                ),
                (
                    'stop',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='notifications_stops', to='app.stop'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='app.user'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.AddField(
            model_name='favouriteroute',
            name='user',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='favourite_routes', to='app.user'
            ),
        ),
        migrations.AddIndex(
            model_name='routestop',
            index=models.Index(condition=models.Q(('status', 'B')), fields=['status'], name='status_b_index'),
        ),
        migrations.AddIndex(
            model_name='routestop',
            index=models.Index(condition=models.Q(('status', 'E')), fields=['status'], name='status_e_index'),
        ),
        migrations.AddConstraint(
            model_name='notification',
            constraint=models.UniqueConstraint(fields=('user', 'number'), name='uniq_number_per_user'),
        ),
    ]
